version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: grocer-ease-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: grocerEase
      MONGO_INITDB_ROOT_PASSWORD: pinakisir123
      MONGO_INITDB_DATABASE: grocer_ease_db
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - grocer-ease-network

  # PostgreSQL Database for Search Service
  postgres:
    image: postgis/postgis:15-3.3
    container_name: grocer-ease-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: grocerease
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - grocer-ease-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant
    container_name: grocer-ease-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - grocer-ease-network

  # Python Chatbot Backend
  chatbot-backend:
    build:
      context: ../grocer-ease-chatbot
      dockerfile: Dockerfile
    container_name: grocer-ease-chatbot
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - MONGO_URI=mongodb://grocerEase:pinakisir123@mongodb:27017/grocer_ease_db?authSource=admin
      - DB_NAME=grocer_ease_db
      - GEMINI_API_KEY=${GEMINI_API_KEY:-AIzaSyD4PRV5vHdCy8kWr9WiQUbZ4I-p0r4sTCc}
      - GEMINI_MODEL_NAME=gemini-2.0-flash
      - CLASSIFIER_TYPE=bart
      - PREFERENCE_MODEL_TYPE=bart
      - STRUCTURED_PROMPTING_API_KEY=${STRUCTURED_PROMPTING_API_KEY:-AIzaSyD4PRV5vHdCy8kWr9WiQUbZ4I-p0r4sTCc}
      - LOG_LEVEL=INFO
    volumes:
      - ../grocer-ease-chatbot:/app
      - /app/__pycache__
    depends_on:
      - mongodb
    networks:
      - grocer-ease-network

  # Search Service (FAISS + Qdrant)
  search-service:
    build:
      context: ../faissGrocerEase
      dockerfile: Dockerfile
    container_name: grocer-ease-search
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=grocerease
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - QDRANT_URL=http://qdrant:6333
    volumes:
      - ../faissGrocerEase:/app
      - ../faissGrocerEase/data:/app/data
    depends_on:
      - postgres
      - qdrant
    networks:
      - grocer-ease-network

  # React Frontend
  frontend:
    build:
      context: ../grocer-ease-ui
      dockerfile: Dockerfile
    container_name: grocer-ease-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://chatbot-backend:8000/api/v1
      - REACT_APP_SEARCH_API_URL=http://search-service:8000
      - REACT_APP_ENV=production
    volumes:
      - ../grocer-ease-ui:/app
      - /app/node_modules
    depends_on:
      - chatbot-backend
      - search-service
    networks:
      - grocer-ease-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: grocer-ease-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - chatbot-backend
      - search-service
    networks:
      - grocer-ease-network

volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  grocer-ease-network:
    driver: bridge 